generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum LinkedAccountProvider {
  spotify
  anilist
  myanimelist
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  accounts       Account[]
  linkedAccounts LinkedAccount[]
  sessions       Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model LinkedAccount {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  userId            String                @db.ObjectId
  type              String // oauth, oidc
  provider          LinkedAccountProvider
  providerAccountId String
  refresh_token     String?               @db.String
  access_token      String?               @db.String
  expires_at        Int?
  token_type        String? // bearer
  scope             String?
  displayName       String?
  username          String?
  imageUrl          String?
  bannerUrl         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String   @unique
  token   String   @unique
  expires DateTime
}

model ForgotPasswordToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String   @unique
  token   String   @unique
  expires DateTime
}

model changeEmailToken {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  currentEmail String   @unique
  newEmail     String   @unique
  token        String   @unique
  expires      DateTime
}
